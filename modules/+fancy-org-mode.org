#+TITLE:  Emacs Org-Mode Settings
#+AUTHOR: Xing Wenjus
#+EMAIL:  xingwenju@gmail.com
#+TAGS:   emacs org-mode
#+startup: overview

* 我的org设置
** 基本配置
*** 内部启动配置
#+BEGIN_SRC elisp

  (use-package org
    :bind (("C-c l" . org-store-link)
	   ("C-c c" . org-capture)
	   ("C-c a" . org-agenda)
	   ("C-c L" . org-insert-link-global)
	   ("C-c O" . org-open-at-point-global)
	   ("C-M-|" . indent-rigidly))
    :config
    (setq org-todo-keywords '((sequence "[学习](s!/@)" "[待办](t!/@)" "[等待](w!))" "|" "[完成](d!/@)" "[取消](c!@)")
                       (sequence "[BUG](b!/@)" "[新事件](i/@)" "[已知问题](k!/@)" "[修改中](W!/@)" "|" "[已修复](f!)"))) 
    (setq org-todo-keyword-faces '(("[学习]" . (:foreground "white" :background "#2ECC71" :weight bold))
								 ("[待办]" . (:foreground "white" :background "#F1C40F" :weight bold))
								 ("[等待]" . (:foreground "white" :background "#3498DB" :weight bold))
								 ("[完成]" . (:foreground "black" :background "snow " :weight bold))
								 ("[取消]" . (:foreground "white" :background "#566573" :weight bold))
								 ("[BUG]" . (:foreground "white" :background "#E74C3C" :weight bold))
								 ("[新事件]" . (:foreground "white" :background "#D35400" :weight bold))
								 ("[已知问题]" . (:foreground "white" :background "#17A589" :weight bold))
								 ("[修改中]" . (:foreground "white" :background "#BB8FCE" :weight bold))
								 ("[已修复]" . (:foreground "white" :background "#566573" :weight bold))))
    (setq org-use-speed-commands t
	  org-return-follows-link t
	  org-hide-emphasis-markers t
	  org-completion-use-ido t
	  org-outline-path-complete-in-steps nil
	  org-src-fontify-natively t   ;; Pretty code blocks
	  org-src-tab-acts-natively t
	  org-confirm-babel-evaluate nil)
    ;; todo关键字

    (setq-default org-display-custom-times t)
    (setq org-time-stamp-custom-formats '("<%a %b %e %Y>" . "<%a %b %e %Y %H:%M>"))
    (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
    (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
					("STYLE_ALL" . "habit"))))
    (setq org-stuck-projects
	  '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
    ;; Config refile targets
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets
	  '((nil :maxlevel . 4)
	    (org-agenda-files :maxlevel . 4)))

    (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
    (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))   ;; Journal entries
    (add-hook 'org-mode-hook #'auto-fill-mode)
    (add-hook 'org-mode-hook 'yas-minor-mode-on)
    (define-key org-mode-map (kbd "M-C-n") 'org-end-of-item-list)
    (define-key org-mode-map (kbd "M-C-p") 'org-beginning-of-item-list)
    (define-key org-mode-map (kbd "M-C-u") 'outline-up-heading)
    (define-key org-mode-map (kbd "M-C-w") 'org-table-copy-region)
    (define-key org-mode-map (kbd "M-C-y") 'org-table-paste-rectangle)
    (define-key org-mode-map [remap org-return] (lambda () (interactive)
						  (if (org-in-src-block-p)
						      (org-return)
						    (org-return-indent)))))
#+END_SRC

#+RESULTS:
: indent-rigidly

*** 定义标签列表
#+BEGIN_SRC elisp

(use-package org
   :config
   (setq org-fast-tag-selection-single-key (quote expert))
   (setq org-tag-alist (quote ((:startgroup)
			       ("@office" . ?o)
			       ("@home" . ?h)
			       ("@travel" . ?t)
			       ("@errand" . ?e)
			       ("party" . ?1)
			       ("finance" . ?2)
			       ("public" . ?3)
			       ("hr" . ?4)
			       ("protocol" . ?5)
			       ("class" . ?6)
			       ("security" . ?7)
			       ("enterprise" . ?8)
			       (:endgroup)
			       ("PERSONAL" . ?p)
			       ("KIDS" . ?k)
			       ("DANIEL" . ?d)
			       ("LULU" . ?l)
			       ("WORK" . ?W)
			       ("PROJECT" . ?P)
			       ("COMPUTER" . ?C)
			       ("PHONE" . ?E)
			       ("HABIT" . ?H)
			       )))
  )


#+END_SRC

#+RESULTS:
: t

*** 链接缩略词
    #+BEGIN_SRC elisp
  (add-to-list 'org-link-abbrev-alist
            '("github"      . "https://github.com/%s"))
  (add-to-list 'org-link-abbrev-alist
            '("youtube"     . "https://youtube.com/watch?v=%s"))
  (add-to-list 'org-link-abbrev-alist
            '("google"      . "https://google.com/search?q="))
  (add-to-list 'org-link-abbrev-alist
            '("gimages"     . "https://google.com/images?q=%s"))
  (add-to-list 'org-link-abbrev-alist
            '("gmap"        . "https://maps.google.com/maps?q=%s"))
  (add-to-list 'org-link-abbrev-alist
            '("duckduckgo"  . "https://duckduckgo.com/?q=%s"))
  (add-to-list 'org-link-abbrev-alist
            '("wikipedia"   . "https://en.wikipedia.org/wiki/%s"))
  (add-to-list 'org-link-abbrev-alist
            '("wolfram"     . "https://wolframalpha.com/input/?i=%s"))
  (add-to-list 'org-link-abbrev-alist
            '("doom-repo"   . "https://github.com/hlissner/doom-emacs/%s"))

    #+END_SRC

    #+RESULTS:
    : ((doom-repo . https://github.com/hlissner/doom-emacs/%s) (wolfram . https://wolframalpha.com/input/?i=%s) (wikipedia . https://en.wikipedia.org/wiki/%s) (duckduckgo . https://duckduckgo.com/?q=%s) (gmap . https://maps.google.com/maps?q=%s) (gimages . https://google.com/images?q=%s) (google . https://google.com/search?q=) (youtube . https://youtube.com/watch?v=%s) (github . https://github.com/%s))

** Babel设置
*** 基本设置
#+BEGIN_SRC elisp

  (use-package ob-go :ensure t)
  (use-package ob-html-chrome :ensure t)
  (use-package ob-deno :ensure t)

  (use-package ox-hugo :ensure t)
  (use-package ox-gfm :ensure t)
  (use-package ox-reveal :ensure t)

  (eval-after-load 'org-src
      '(define-key org-src-mode-map
	 (kbd "C-x C-s") #'org-edit-src-exit))

#+END_SRC

#+RESULTS:
: org-edit-src-exit

*** 结构化模板

=<s[TAB]= 插入代码块

=<l= 插入Lisp代码块

#+begin_src elisp :tangle no
(setq org-structure-template-alist
	'(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
	("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
	("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
	("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
	("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
	("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
	("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
	("L" "#+latex: " "<literal style=\"latex\">?</literal>")
	("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
	("H" "#+html: " "<literal style=\"html\">?</literal>")
	("a" "#+begin_ascii\n?\n#+end_ascii")
	("A" "#+ascii: ")
	("i" "#+index: ?" "#+index: ?")
	("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+end_src

#+RESULTS:




This lets me nest quotes. http://emacs.stackexchange.com/questions/2404/exporting-org-mode-nested-blocks-to-html

#+begin_src elisp :tangle yes
(defun my/org-html-quote2 (block backend info)
(when (org-export-derived-backend-p backend 'html)
(when (string-match "\\`<div class=\"quote2\">" block)
(setq block (replace-match "<blockquote>" t nil block))
(string-match "</div>\n\\'" block)
(setq block (replace-match "</blockquote>\n" t nil block))
block)))
(eval-after-load 'ox
'(add-to-list 'org-export-filter-special-block-functions 'my/org-html-quote2))
#+end_src

#+RESULTS:
| my/org-html-quote2 |

** 抓取

   这里可以把抓取模板单独存储为文件，更容易修改和维护
   
#+BEGIN_SRC elisp
(use-package org
  :config
  (defun get-year-and-month ()
    (list (format-time-string "%Y") (format-time-string "%m")))


  (defun find-month-tree ()
    (let* ((path (get-year-and-month))
           (level 1)
           end)
      (unless (derived-mode-p 'org-mode)
        (error "Target buffer \"%s\" should be in Org mode" (current-buffer)))
      (goto-char (point-min))           ;移动到 buffer 的开始位置
      ;; 先定位表示年份的 headline，再定位表示月份的 headline
      (dolist (heading path)
        (let ((re (format org-complex-heading-regexp-format
                          (regexp-quote heading)))
              (cnt 0))
          (if (re-search-forward re end t)
              (goto-char (point-at-bol)) ;如果找到了 headline 就移动到对应的位置
            (progn                       ;否则就新建一个 headline
              (or (bolp) (insert "\n"))
              (if (/= (point) (point-min)) (org-end-of-subtree t t))
              (insert (make-string level ?*) " " heading "\n"))))
        (setq level (1+ level))
        (setq end (save-excursion (org-end-of-subtree t t))))
      (org-end-of-subtree)))


  (defun random-alphanum ()
    (let* ((charset "abcdefghijklmnopqrstuvwxyz0123456789")
           (x (random 36)))
      (char-to-string (elt charset x))))

  (defun create-password ()
    (let ((value ""))
      (dotimes (number 16 value)
        (setq value (concat value (random-alphanum))))))


  (defun get-or-create-password ()
    (setq password (read-string "Password: "))
    (if (string= password "")
        (create-password)
      password))

  (defun org-capture-template-goto-link ()
    (org-capture-put :target (list 'file+headline
                                   (nth 1 (org-capture-get :target))
                                   (org-capture-get :annotation)))
    (org-capture-put-target-region-and-position)
    (widen)
    (let ((hd (nth 2 (org-capture-get :target))))
      (goto-char (point-min))
      (if (re-search-forward
           (format org-complex-heading-regexp-format (regexp-quote hd)) nil t)
          (org-end-of-subtree)
        (goto-char (point-max))
        (or (bolp) (insert "\n"))
        (insert "* " hd "\n"))))

  (defun generate-anki-note-body ()
    (interactive)
    (message "Fetching note types...")
    (let ((note-types
           (sort (anki-editor--anki-connect-invoke-result "modelNames" 5)
                 #'string-lessp))
          note-type fields)
      (setq note-type (completing-read "Choose a note type: " note-types))
      (message "Fetching note fields...")
      (setq fields (anki-editor--anki-connect-invoke-result
                    "modelFieldNames" 5
                    `((modelName . ,note-type))))
      (concat "  :PROPERTIES:\n"
              "  :ANKI_NOTE_TYPE: " note-type "\n"
              "  :END:\n\n"
              (mapconcat (lambda (str) (concat "** " str))
                         fields
                         "\n\n"))))
  ;; Capture template

  (setq org-capture-templates nil)

  (add-to-list 'org-capture-templates '("x" "Extra"))

  (setq anki-org-file (dropbox-path "org/anki.org"))
  (add-to-list 'org-capture-templates
               `("xv"
                 "Vocabulary"
                 entry
                 (file+headline anki-org-file "Vocabulary")
                 ,(concat "* %^{heading} :note:\n"
                          "%(generate-anki-note-body)\n")))
  (setq snippets-org-file (dropbox-path "org/snippets.org"))
  (add-to-list 'org-capture-templates
               '("xs"
                 "Snippets"
                 entry
                 (file snippets-org-file)
                 (file "~/.doom.d/templates/capture-template/snippet.template")
                 ;; "* %?\t%^g\n #+BEGIN_SRC %^{language}\n\n#+END_SRC"
                 :kill-buffer t))
  (setq billing-org-file (dropbox-path "org/billing.org"))
  (add-to-list 'org-capture-templates
               '("xb"
                 "Billing"
                 plain
                 (file+function billing-org-file find-month-tree)
                 (file "~/.doom.d/templates/capture-template/billing.template")
                 ;; " | %U | %^{类别} | %^{描述} | %^{金额} |"
                 :kill-buffer t))

  (setq contacts-org-file (dropbox-path "org/contacts.org"))
  (add-to-list 'org-capture-templates
               '("xc"
                 "Contacts"
                 entry
                 (file contacts-org-file)
                 (file "~/.doom.d/templates/capture-template/contact.template")
                 ;; "* %^{姓名} %^{手机号}p %^{邮箱}p %^{住址}p %^{微信}p %^{微博}p %^{whatsapp}p\n\n  %?"
                 :empty-lines 1 :kill-buffer t))

  (setq password-org-file (dropbox-path "org/password.cpt.org"))
  (add-to-list 'org-capture-templates
               '("xp"
                 "Passwords"
                 entry
                 (file password-org-file)
                 "* %U - %^{title} %^G\n\n  - 用户名: %^{用户名}\n  - 密码: %(get-or-create-password)"
                 :empty-lines 1 :kill-buffer t))

  (setq blog-org-file (dropbox-path "org/blog.org"))
  (add-to-list 'org-capture-templates
               `("xx"
                 "Blog"
                 plain
                 (file ,(concat blog-org-file (format-time-string "%Y-%m-%d.org")))
                 ,(concat "#+startup: showall\n"
                          "#+options: toc:nil\n"
                          "#+begin_export html\n"
                          "---\n"
                          "layout     : post\n"
                          "title      : %^{标题}\n"
                          "categories : %^{类别}\n"
                          "tags       : %^{标签}\n"
                          "---\n"
                          "#+end_export\n"
                          "#+TOC: headlines 2\n")
                 ))

  ;; Protocol Group
  (setq links-org-file (dropbox-path "org/links.org"))
  (add-to-list 'org-capture-templates
               '("l"
                 "Temp Links from the interwebs"
                 entry
                 (file+headline links-org-file "Bookmarks")
                 "* %t %:description\nlink: %l \n\n%i\n"
                 :kill-buffer nil))

  (add-to-list 'org-capture-templates
               '("a"
                 "Protocol Annotation"
                 plain
                 (file+function links-org-file org-capture-template-goto-link)
                 " %^{Title}\n  %U - %?\n\n  %:initial"
                 :empty-lines 1))

  ;; Task Group
  (add-to-list 'org-capture-templates '("t" "Tasks"))

  (setq daniel-org-file (dropbox-path "org/daniel.agenda.org"))
  (add-to-list 'org-capture-templates
               '("ts"                                              ; hotkey
                 "Son Daniel's Task"                               ; title
                 entry                                             ; type
                 (file+headline daniel-org-file "Task") ; target
                 (file "~/.doom.d/templates/capture-template/todo.template")))
  (setq lulu-org-file (dropbox-path "org/lulu.agenda.org"))
  (add-to-list 'org-capture-templates
               '("tl"
                 "Wife Lulu's Task"
                 entry
                 (file+headline lulu-org-file "Task")
                 (file "~/.doom.d/templates/capture-template/todo.template")))
  (setq my-org-file (dropbox-path "org/xingwenju.agenda.org"))
  (add-to-list 'org-capture-templates
               '("tr"
                 "My Book Reading Task"
                 entry
                 (file+headline my-org-file "Reading")
                 "** TODO %^{书名}\n%u\n%a\n"
                 :immediate-finish t))
  (setq projects-org-file (dropbox-path "org/projects.agenda.org"))
  (add-to-list 'org-capture-templates
               '("tp"
                 "My Work Projects"
                 entry
                 (file projects-org-file)
                 (file "~/.doom.d/templates/capture-template/project.template")
                 :empty-line 1))
  (setq works-org-file (dropbox-path "org/works.agenda.org"))
  (add-to-list 'org-capture-templates
               '("tw"
                 "My Work Task"
                 entry
                 (file+headline works-org-file "Work")
                 (file "~/.doom.d/templates/capture-template/basic.template")
                 :immediate-finish t))

  ;; Most often used"
  (setq phone-org-file (dropbox-path "org/phone.org"))
  (add-to-list 'org-capture-templates
               '("P"
                 "My Phone calls"
                 entry
                 (file+headline phone-org-file "Phone Calls")
                 (file "~/.doom.d/templates/capture-template/phone.template")
                 ;; "* %^{Habit cards|music|balls|games}\n  %?"
                 :immediate-finish t
                 :new-line 1))

  (setq habit-org-file (dropbox-path "org/habit.org"))
  (add-to-list 'org-capture-templates
               '("h"
                 "My Habit"
                 entry
                 (file habit-org-file)
                 (file "~/.doom.d/templates/capture-template/habit.template")
                 ;; "* %^{Habit cards|music|balls|games}\n  %?"
                 :immediate-finish t
                 :new-line 1))

  (setq notes-org-file (dropbox-path "org/notes.org"))
  (add-to-list 'org-capture-templates
               '("n"
                 "My Notes"
                 entry
                 (file notes-org-file)
                 (file "~/.doom.d/templates/capture-template/notes.template")
                 ;; "* %^{Loggings For...} %t %^g\n  %?"
                 :immediate-finish t
                 :new-line 1))

  (setq inbox-org-file (dropbox-path "org/inbox.agenda.org"))
  (add-to-list 'org-capture-templates
               '("i"
                 "My GTD Inbox"
                 entry
                 (file inbox-org-file)
                 (file "~/.doom.d/templates/capture-template/inbox.template")
                 ;; "* [#%^{Priority}] %^{Title} %^g\n SCHEDULED:%U %?\n"
                 :immediate-finish t
                 :new-line 1)))

#+END_SRC

#+RESULTS:
: t
** 重转

=org-refile= 将条目转移到其他位置 

    #+begin_src emacs-lisp :tangle yes
      (use-package org
	    :config
	    (setq org-reverse-note-order t)
	    (setq org-refile-use-outline-path nil)
	    (setq org-refile-allow-creating-parent-nodes 'confirm)
	    (setq org-refile-use-cache nil)
	    (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))
	    (setq org-blank-before-new-entry nil)
    )
    #+end_src

    #+RESULTS:
    : t
   
** 日历

#+BEGIN_SRC elisp

(use-package org-super-agenda
  :commands (org-super-agenda-mode)
  :config)

(with-eval-after-load 'org-agenda
    (defun evan/agenda-icon-material (name)
      "返回一个all-the-icons-material图标"
      (list (all-the-icons-material name)))
    (setq org-agenda-category-icon-alist
        `(
          ;; 学习相关
          ("待办" ,(evan/agenda-icon-material "check_box") nil nil :ascent center)
          ("学习" ,(evan/agenda-icon-material "book") nil nil :ascent center)
          ("等待" ,(evan/agenda-icon-material "ac_unit") nil nil :ascent center)
          ("完成" ,(evan/agenda-icon-material "done") nil nil :ascent center)
          ;; 代码相关
          ("取消" ,(evan/agenda-icon-material "cancel") nil nil :ascent)
          ("BUG" ,(evan/agenda-icon-material "bug_report") nil nil :ascent center)
          ("新事件" ,(evan/agenda-icon-material "new_releases") nil nil :ascent center)
          ("已知问题" ,(evan/agenda-icon-material "comment") nil nil :ascent center)
          ("修改中" ,(evan/agenda-icon-material "adjust") nil nil :ascent center)
          ("已修复" ,(evan/agenda-icon-material "thumb_up") nil nil :ascent center)))
  ;; agenda 里面时间块彩色显示
  ;; From: https://emacs-china.org/t/org-agenda/8679/3
  (defun ljg/org-agenda-time-grid-spacing ()
    "Set different line spacing w.r.t. time duration."
    (save-excursion
      (let* ((background (alist-get 'background-mode (frame-parameters)))
	     (background-dark-p (string= background "dark"))
	     (colors (list "#1ABC9C" "#2ECC71" "#3498DB" "#9966ff"))
	     pos
	     duration)
	(nconc colors colors)
	(goto-char (point-min))
	(while (setq pos (next-single-property-change (point) 'duration))
	  (goto-char pos)
	  (when (and (not (equal pos (point-at-eol)))
		     (setq duration (org-get-at-bol 'duration)))
	    (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
		  (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
	      (overlay-put ov 'face `(:background ,(car colors)
						  :foreground
						  ,(if background-dark-p "black" "white")))
	      (setq colors (cdr colors))
	      (overlay-put ov 'line-height line-height)
	      (overlay-put ov 'line-spacing (1- line-height))))))))

  (add-hook 'org-agenda-finalize-hook #'ljg/org-agenda-time-grid-spacing)

  (setq org-agenda-custom-commands
        '(
          ;; My GTD tasks
          ("u"
           "My GTD view"
           (
            (todo "" (
                      (org-agenda-overriding-header "Get Things Done")
                      (org-super-agenda-groups
                       '(
                         (:name "马上去做 Quick Picks"
                                :effort< "0:30")
                         (:name "★ 重要任务 Important"
                                :priority "A")
                         (:name "↑ ↓ 其他任务 Others"
                                      :priority<= "B"
                                      :scheduled today
                                      :order 1)
                         (:discard (:anything t))))))
            (todo "" (
                      (org-agenda-overriding-header "★ All Projects")
                      (org-super-agenda-groups
                       '(
                         (:name none  ; Disable super group header
                                :children todo)
                         (:discard (:anything t))))))))
          ;; My grouped tasks
          ("x"
           "My Super view"
           (
            (agenda "" (
                        (org-agenda-overriding-header "❉ 我的日程 ❉")
                        (org-super-agenda-groups
                         '(
                         (:name "△ 今天是个好天气 ▽"
                                  :time-grid t)
                         (:name "★ 重要任务 Important"
                                :priority "A")
                         (:name "↑ ↓ 其他任务 Others"
                                      :priority<= "B"
                                      :scheduled today
                                      :order 1)
                           
           ))))))
          ;; Daniel's tasks
          ("d"
           "Daniel's Task view"
           (
            (todo "" (
                      (org-agenda-overriding-header "Daniel's Tasks")
                      (org-super-agenda-groups
                       '(
                         (:name "daniel" :tag ("DANIEL" "daniel" "kids" "KIDS"))
                         (:discard (:anything t))))))))
          ;; End
          ("e"
           "Computer Related"
           (
            (tags-todo "" (
			   (org-agenda-overriding-header "Computer Related")
			   (org-super-agenda-groups
			    `(
                              (:name "General Comupter Related"
                                     :tag "COMPUTER"
                                     )
                              (:name "Emacs Related"
                                     :tag "COMPUTER"
                                     :regexp ("org" "emacs" ,(rx bow "emacs" eow))
                                     )
                              )))))))))


#+END_SRC

#+RESULTS:
| u | My GTD view        | ((todo  ((org-agenda-overriding-header Get Things Done) (org-super-agenda-groups '((:name 马上去做 Quick Picks :effort< 0:30) (:name 重要任务 Important :priority A) (:priority<= B :scheduled today :order 1) (:discard (:anything t)))))) (todo  ((org-agenda-overriding-header All Projects) (org-super-agenda-groups '((:name none :children todo) (:discard (:anything t))))))) |
| x | My Super view      | ((agenda  ((org-agenda-overriding-header Today Calendar) (org-super-agenda-groups '((:name Today :time-grid t))))))                                                                                                                                                                                                                                                                  |
| d | Daniel's Task view | ((todo  ((org-agenda-overriding-header Daniel's Tasks) (org-super-agenda-groups '((:name daniel :tag (DANIEL daniel kids KIDS)) (:discard (:anything t)))))))                                                                                                                                                                                                                        |
| e | Computer Related   | ((tags-todo  ((org-agenda-overriding-header Computer Related) (org-super-agenda-groups `((:name General Comupter Related :tag COMPUTER) (:name Emacs Related :tag COMPUTER :regexp (org emacs ,(rx bow emacs eow))))))))                                                                                                                                                             |

**　大脑模拟

#+BEGIN_SRC elisp
(use-package org-brain
  :ensure t
  :init
  (setq org-brain-visualize-default-choices 'all
        org-brain-title-max-length 24
        org-brain-include-file-entries nil
        org-brain-file-entries-use-title nil)

  :config
  (cl-pushnew '("b" "Brain" plain (function org-brain-goto-end)
                "* %i%?" :empty-lines 1)
              org-capture-templates
              :key #'car :test #'equal))


#+END_SRC

#+RESULTS:
: t

** 美化
*** 使用图标

#+BEGIN_SRC elisp
(use-package org-bullets
  :ensure t
  :init (add-hook 'org-mode-hook 'org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("☀" "☪"  "☯"  "✿" "→"))
)
#+END_SRC

#+RESULTS:

*** 美化优先级 
#+BEGIN_SRC elisp
  (use-package org-fancy-priorities
    :ensure t
    :hook
    (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '("★" "↑" "↓")))

#+END_SRC

#+RESULTS:
| yas-minor-mode-on | auto-fill-mode | org-superstar-mode | org-fancy-priorities-mode | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

*** 标题字体
#+BEGIN_SRC elisp

  (use-package org
    :config

    (set-face-attribute 'org-link nil
			:weight 'normal
			:background nil)
    (set-face-attribute 'org-code nil
			:foreground "#a9a1e1"
			:background nil)
    (set-face-attribute 'org-date nil
			:foreground "#5B6268"
			:background nil)
    (set-face-attribute 'org-level-1 nil
			:foreground "steelblue2"
			:background nil
			:height 1.1
			:weight 'normal)
    (set-face-attribute 'org-level-2 nil
			:foreground "slategray2"
			:background nil
			:height 1.0
			:weight 'normal)
    (set-face-attribute 'org-level-3 nil
			:foreground "SkyBlue2"
			:background nil
			:height 1.0
			:weight 'normal)
    (set-face-attribute 'org-level-4 nil
			:foreground "DodgerBlue2"
			:background nil
			:height 1.0
			:weight 'normal)
    (set-face-attribute 'org-level-5 nil
			:weight 'normal)
    (set-face-attribute 'org-level-6 nil
			:weight 'normal)
    (set-face-attribute 'org-document-title nil
			:foreground "SlateGray1"
			:background nil
			:height 1.25
			:weight 'bold)

    (setq org-list-demote-modify-bullet (quote (("+" . "-")
						("*" . "-")
						("1." . "-")
						("1)" . "-")
						("A)" . "-")
						("B)" . "-")
						("a)" . "-")
						("b)" . "-")
						("A." . "-")
						("B." . "-")
						("a." . "-")
						("b." . "-"))))
  )

#+END_SRC

#+RESULTS:
: t

*** 超级星号

    =superstar= 是用于美化每个星号图标

#+BEGIN_SRC elisp :tangle yes

  ;; (use-package org-noter :ensure t)
  ;; (use-package org-appear :ensure t)
  (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (set-face-attribute 'org-superstar-header-bullet nil :inherit 'fixed-pitched :height 180)
    :custom
    (org-superstar-headline-bullets-list '("☀" "☪" "☯" "✿" "→"))
    (setq org-ellipsis " ▼ "))

#+END_SRC

#+RESULTS:
| yas-minor-mode-on | auto-fill-mode | org-superstar-mode | org-fancy-priorities-mode | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** 下载工具

#+BEGIN_SRC elisp
(use-package org-download :ensure t)
#+END_SRC

#+RESULTS:

** 日志工具

#+BEGIN_SRC elisp

(use-package org-journal
  :ensure t
  :defer t
  :init
  (add-to-list 'magic-mode-alist '(+org-journal-p . org-journal-mode))

  (defun +org-journal-p ()
    "Wrapper around `org-journal-is-journal' to lazy load `org-journal'."
    (when-let (buffer-file-name (buffer-file-name (buffer-base-buffer)))
      (if (or (featurep 'org-journal)
              (and (file-in-directory-p
                    buffer-file-name (expand-file-name org-journal-dir org-directory))
                   (require 'org-journal nil t)))
          (org-journal-is-journal))))

  (setq org-journal-dir (dropbox-path "org/journal/")
        org-journal-cache-file (dropbox-path "org/journal/"))

  :config
  ;; Remove the orginal journal file detector and rely on `+org-journal-p'
  ;; instead, to avoid loading org-journal until the last possible moment.
  (setq magic-mode-alist (assq-delete-all 'org-journal-is-journal magic-mode-alist))

  ;; Setup carryover to include all configured TODO states. We cannot carry over
  ;; [ ] keywords because `org-journal-carryover-items's syntax cannot correctly
  ;; interpret it as anything other than a date.
  (setq org-journal-carryover-items  "TODO=\"TODO\"|TODO=\"PROJ\"|TODO=\"STRT\"|TODO=\"WAIT\"|TODO=\"HOLD\""))

#+END_SRC

#+RESULTS:
: t

** 番茄闹钟

#+BEGIN_SRC elisp
(use-package org-pomodoro
  :ensure t
  :config
  (with-eval-after-load 'org-pomodoro
    ;; prefer PulseAudio to ALSA in $current_year
    (setq org-pomodoro-audio-player (or (executable-find "paplay")
					org-pomodoro-audio-player))

    ;; configure pomodoro alerts to use growl or libnotify
    (alert-add-rule :category "org-pomodoro"
		    :style (cond (alert-growl-command
				  'growl)
				 (alert-notifier-command
				  'notifier)
				 (alert-libnotify-command
				  'libnotify)
				 (alert-default-style)))))
#+END_SRC

#+RESULTS:
: t

** Elfeed
 #+BEGIN_SRC elisp
 (use-package elfeed-org
    :config
       (setq rmh-elfeed-org-files (list
			       (concat org-directory "/elfeed1.org")
			       (concat org-directory "/elfeed2.org")))
   (setq elfeed-db-directory (concat org-directory "/elfeed/db/"))
   (setq elfeed-enclosure-default-dir (concat org-directory "/elfeed/enclosures/"))
   (setq elfeed-search-filter "@3-month-ago +unread")
 )
 #+END_SRC

 #+RESULTS:
 : t
** Reveal展示

#+BEGIN_SRC elisp
(use-package ox-reveal
  :init
  (setq org-reveal-root (dropbox-path "shared/ppt/reveal.js"))
  (setq org-reveal-postamble "Xing Wenju"))
#+END_SRC

#+RESULTS:

#+DESCRIPTION: 使用文学编程，对org模式进行终极设置 

#+PROPERTY:    header-args:elisp  :tangle ~/EnvSetup\config\evil-emacs/modules/+fancy-org-mode.el
#+PROPERTY:    header-args:sh     :tangle no
#+PROPERTY:    header-args:       :results silent   :eval no-export   :comments org

#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

